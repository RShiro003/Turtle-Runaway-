# Turtle Runaway 게임 설명

## 개요

이 게임은 **Turtle Runaway**로, 파란색 `runner` 터틀을 사용자가 직접 조작하고 빨간색 `chaser` 터틀은 인공지능에 의해 `runner`를 추격합니다. 사용자는 `runner`를 이동시키면서 `chaser`에게 잡히지 않도록 도망가는 게임입니다. 게임은 `runner`가 잡히면 종료되며, 점수와 경과 시간이 화면에 표시됩니다.

## 주요 클래스 및 함수 설명

### 1. `RunawayGame` 클래스

이 클래스는 게임의 전체적인 로직을 관리하며, `runner`와 `chaser` 터틀의 위치, 잡혔는지 여부, 게임 점수 및 경과 시간을 처리합니다.

- **`__init__(self, canvas, runner, chaser, catch_radius=50)`**
  - 게임의 캔버스, `runner`, `chaser` 터틀, 그리고 터틀이 잡혔다고 간주되는 거리를 초기화합니다.
  - 점수 및 시간을 표시하기 위한 터틀도 생성합니다.

- **`is_catched(self)`**
  - `runner`와 `chaser` 터틀의 현재 위치를 계산하여 둘 사이의 거리가 `catch_radius`보다 작은지 확인하고, 잡혔는지 여부를 반환합니다.

- **`start(self, init_dist=400, ai_timer_msec=100)`**
  - 게임이 시작될 때 `runner`와 `chaser`의 초기 위치를 설정하고, 게임 시작 시간과 점수를 초기화합니다.
  - 일정 시간 간격으로 `step` 함수를 호출하는 타이머를 시작합니다.

- **`step(self)`**
  - `runner`와 `chaser`가 움직이는 AI 로직을 실행하고, 두 터틀이 잡혔는지 여부를 확인합니다.
  - 게임 경과 시간과 점수를 화면에 업데이트하며, 게임이 계속될 수 있도록 타이머를 설정합니다.

### 2. `ManualMover` 클래스

사용자가 직접 조작할 수 있는 `runner` 터틀의 동작을 정의합니다.

- **`__init__(self, canvas, step_move=10, step_turn=10)`**
  - 키보드 입력을 받아 터틀이 앞뒤로 이동하거나 좌우로 회전할 수 있도록 이벤트 핸들러를 설정합니다.
  
- **`run_ai(self, opp_pos, opp_heading)`**
  - AI 로직을 포함하지 않은 비어 있는 함수로, `runner` 터틀은 AI로 제어되지 않으며 사용자가 직접 조작합니다.

### 3. `IntelligentMover` 클래스

인공지능으로 움직이는 `chaser` 터틀을 정의합니다.

- **`__init__(self, canvas, step_move=10, step_turn=10)`**
  - 기본적으로 움직일 거리와 회전할 각도를 설정합니다.

- **`run_ai(self, opp_pos, opp_heading)`**
  - `runner` 터틀의 위치를 추적하여 해당 방향으로 회전한 후, 그 위치를 향해 전진합니다. 이를 통해 `chaser`는 `runner`를 쫓아가게 됩니다.

## 실행 방법

1. `turtle_runaway.py` 파일을 실행합니다.
2. 파란색 터틀(`runner`)을 키보드 방향키(위, 아래, 왼쪽, 오른쪽)를 사용하여 움직입니다.
3. 빨간색 터틀(`chaser`)은 인공지능에 의해 자동으로 `runner`를 쫓아갑니다.
4. 게임 화면 상단에는 현재 점수와 경과 시간이 표시됩니다.
5. `runner`가 `chaser`에게 잡히면 게임이 종료됩니다.

## 주요 기능

- **타이머**: 게임이 시작된 시점부터의 경과 시간이 표시됩니다.
- **점수**: `runner`가 잡히지 않고 살아남는 시간에 따라 점수가 올라갑니다.
- **지능적인 추격자**: `chaser`는 `runner`의 위치를 추적하여 해당 방향으로 회전하고 이동합니다.

## 게임 개선 아이디어

1. **게임 배경 추가**: 배경 이미지 또는 지형을 추가하여 시각적으로 게임을 더 흥미롭게 만들 수 있습니다.
2. **단계별 난이도**: 일정 시간이 지날 때마다 `chaser`의 속도를 높여 난이도를 점진적으로 올릴 수 있습니다.
3. **보너스 시스템**: 특정 조건(예: 일정 시간 동안 잡히지 않기)을 만족할 때 보너스 점수를 주는 시스템을 추가할 수 있습니다.

## 스크린샷

게임이 실행되는 동안의 스크린샷을 첨부하여, 게임의 작동 모습을 시각적으로 확인할 수 있습니다.
